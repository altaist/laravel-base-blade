<?php

namespace App\Services\Telegram\Base;

use App\DTOs\TelegramKeyboardDto;
use App\DTOs\TelegramMessageDto;
use App\Contracts\TelegramBotCommandInterface;
use App\Services\Telegram\TelegramService;
use App\Services\AuthLinkService;
use App\Models\User;

abstract class BaseTelegramCommand implements TelegramBotCommandInterface
{
    public function __construct(
        protected readonly TelegramService $telegram
    ) {
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    public function canProcess(TelegramMessageDto $message): bool
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏ –æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π
        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º callback_query —Å –∫–æ–º–∞–Ω–¥–æ–π
        return $message->command === $this->getName();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    protected function reply(TelegramMessageDto $message, string $text, ?string $parseMode = TelegramService::FORMAT_NONE): void
    {
        $this->telegram->sendMessageToUser($message->userId, $text, $parseMode);
        $this->answerCallbackQuery($message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    protected function replyWithKeyboard(
        TelegramMessageDto $message,
        string $text,
        array $buttons,
        ?string $parseMode = TelegramService::FORMAT_NONE,
        bool $oneTime = false,
        bool $resize = true
    ): void {
        $this->telegram->sendMessageWithKeyboard(
            $message->userId,
            $text,
            $buttons,
            $parseMode,
            $oneTime,
            $resize
        );
        $this->answerCallbackQuery($message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    protected function replyWithInlineKeyboard(
        TelegramMessageDto $message,
        string $text,
        array $buttons,
        ?string $parseMode = TelegramService::FORMAT_NONE
    ): void {
        $keyboard = new TelegramKeyboardDto($buttons, inline: true);
        $this->telegram->sendMessageWithInlineKeyboard(
            $message->userId,
            $text,
            $keyboard,
            $parseMode
        );
        $this->answerCallbackQuery($message);
    }

    /**
     * –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query (—É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏)
     */
    protected function answerCallbackQuery(
        TelegramMessageDto $message,
        ?string $text = null,
        bool $showAlert = false
    ): void {
        if ($message->messageType->value !== 'callback_query') {
            return;
        }

        $additionalData = json_decode($message->additionalData ?? '{}', true);
        $callbackQueryId = $additionalData['callback_query']['id'] ?? null;

        if ($callbackQueryId) {
            $this->telegram->answerCallbackQuery(
                $callbackQueryId,
                $text,
                $showAlert,
                null,
                0,
                $message->botId
            );
        }
    }

    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
     */
    protected function findUser(TelegramMessageDto $message): ?User
    {
        return User::whereHas('telegramBots', function($query) use ($message) {
            $query->where('telegram_id', $message->userId)
                  ->where('bot_name', $message->botId);
        })->first();
    }

    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
     * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    protected function requireUser(TelegramMessageDto $message): ?User
    {
        $user = $this->findUser($message);
        
        if (!$user) {
            $this->sendUnauthorizedMessage($message);
            return null;
        }
        
        return $user;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞
     */
    protected function sendUnauthorizedMessage(TelegramMessageDto $message): void
    {
        $authLinkService = app(AuthLinkService::class);
        
        try {
            $authLink = $authLinkService->generateRegistrationLink([
                'telegram_id' => $message->userId,
            ], [
                'expires_in_minutes' => 60,
                'ip_address' => null,
                'user_agent' => 'Telegram Bot',
            ]);
            
            $text = "üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n" .
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n\n" .
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n" .
                "<a href=\"{$authLink['url']}\">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a>\n\n" .
                "–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 60 –º–∏–Ω—É—Ç.";
                
            $this->reply($message, $text, TelegramService::FORMAT_HTML);
            
        } catch (\Exception $e) {
            $this->reply($message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
     */
    protected function createAuthLink(User $user, TelegramMessageDto $message): array
    {
        $authLinkService = app(AuthLinkService::class);
        
        return $authLinkService->generateAuthLink($user, [
            'expires_in_minutes' => 15,
            'ip_address' => null,
            'user_agent' => 'Telegram Bot',
            'author_id' => $user->id,
        ]);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
     */
    protected function createRegistrationLink(TelegramMessageDto $message): array
    {
        $authLinkService = app(AuthLinkService::class);
        
        return $authLinkService->generateRegistrationLink([
            'telegram_id' => $message->userId,
        ], [
            'expires_in_minutes' => 60,
            'ip_address' => null,
            'user_agent' => 'Telegram Bot',
        ]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ start_param
     */
    protected function handleAccountBinding(TelegramMessageDto $message): void
    {
        if (empty($message->arguments)) {
            return;
        }

        $startParam = $message->arguments[0] ?? null;
        
        if (empty($startParam)) {
            return;
        }

        $authLinkService = app(AuthLinkService::class);
        
        try {
            $result = $authLinkService->bindTelegramAccount($startParam, $message->userId, $message->botId);
            
            if ($result['success']) {
                $text = "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n" .
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.";
                $this->reply($message, $text, TelegramService::FORMAT_HTML);
            } else {
                $text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n" .
                    $result['message'] . "\n\n" .
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.";
                $this->reply($message, $text, TelegramService::FORMAT_HTML);
            }
        } catch (\Exception $e) {
            $text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n" .
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
            $this->reply($message, $text, TelegramService::FORMAT_HTML);
        }
    }
}
