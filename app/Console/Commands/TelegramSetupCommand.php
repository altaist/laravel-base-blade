<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;

class TelegramSetupCommand extends Command
{
    protected $signature = 'telegram:setup 
        {url? : URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-domain.com)}
        {--remove : –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–µ–±—Ö—É–∫–∏}
        {--info : –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤}';

    protected $description = '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö Telegram –±–æ—Ç–æ–≤';

    public function handle(): int
    {
        $url = $this->argument('url') ?? config('app.url');
        
        if (empty($url)) {
            $this->error('–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –≤ APP_URL');
            $this->info('–ü—Ä–∏–º–µ—Ä: php artisan telegram:setup https://your-domain.com');
            return Command::FAILURE;
        }

        // –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ URL –µ—Å–ª–∏ –µ—Å—Ç—å
        $url = rtrim($url, '/');

        if ($this->option('info')) {
            return $this->showWebhookInfo($url);
        }

        if ($this->option('remove')) {
            return $this->removeAllWebhooks();
        }

        return $this->setupAllWebhooks($url);
    }

    private function setupAllWebhooks(string $baseUrl): int
    {
        $this->info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤...");
        $this->info("–ë–∞–∑–æ–≤—ã–π URL: {$baseUrl}");

        $bots = config('telegram');
        $successCount = 0;
        $totalBots = 0;

        foreach ($bots as $botType => $config) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–∫—Ü–∏–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, commands)
            if (!isset($config['token'])) {
                continue;
            }

            $totalBots++;
            $this->info("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —Ç–∏–ø–∞: {$botType}");

            try {
                $webhookUrl = "{$baseUrl}/api/telegram/{$botType}/webhook";
                $this->info("URL –≤–µ–±—Ö—É–∫–∞: {$webhookUrl}");

                $response = Http::get("https://api.telegram.org/bot{$config['token']}/setWebhook", [
                    'url' => $webhookUrl,
                    'allowed_updates' => ['message', 'callback_query'],
                ]);

                $result = $response->json();

                if ($response->successful() && ($result['ok'] ?? false)) {
                    $this->info("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    $this->info("–û–ø–∏—Å–∞–Ω–∏–µ: " . ($result['description'] ?? ''));
                    $successCount++;
                } else {
                    $this->error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫");
                    $this->error("–û—Ç–≤–µ—Ç API: " . json_encode($result, JSON_UNESCAPED_UNICODE));
                }
            } catch (\Exception $e) {
                $this->error("‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage());
            }
        }

        $this->info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:");
        $this->info("–£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {$successCount}/{$totalBots} –±–æ—Ç–æ–≤");

        if ($successCount === $totalBots) {
            $this->info("üéâ –í—Å–µ –≤–µ–±—Ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!");
            return Command::SUCCESS;
        } else {
            $this->warn("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å");
            return Command::FAILURE;
        }
    }

    private function removeAllWebhooks(): int
    {
        $this->info("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ–±—Ö—É–∫–æ–≤...");

        $bots = config('telegram');
        $successCount = 0;
        $totalBots = 0;

        foreach ($bots as $botType => $config) {
            if (!isset($config['token'])) {
                continue;
            }

            $totalBots++;
            $this->info("\n–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –±–æ—Ç–∞ —Ç–∏–ø–∞: {$botType}");

            try {
                $response = Http::get("https://api.telegram.org/bot{$config['token']}/deleteWebhook");
                $result = $response->json();

                if ($response->successful() && ($result['ok'] ?? false)) {
                    $this->info("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
                    $successCount++;
                } else {
                    $this->error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫");
                    $this->error("–û—Ç–≤–µ—Ç API: " . json_encode($result, JSON_UNESCAPED_UNICODE));
                }
            } catch (\Exception $e) {
                $this->error("‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage());
            }
        }

        $this->info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:");
        $this->info("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {$successCount}/{$totalBots} –≤–µ–±—Ö—É–∫–æ–≤");

        if ($successCount === $totalBots) {
            $this->info("üéâ –í—Å–µ –≤–µ–±—Ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!");
            return Command::SUCCESS;
        } else {
            $this->warn("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å");
            return Command::FAILURE;
        }
    }

    private function showWebhookInfo(string $baseUrl): int
    {
        $this->info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –≤–µ–±—Ö—É–∫–∞—Ö:");

        $bots = config('telegram');
        $hasWebhooks = false;

        foreach ($bots as $botType => $config) {
            if (!isset($config['token'])) {
                continue;
            }

            $this->info("\nüîç –ë–æ—Ç —Ç–∏–ø–∞: {$botType}");
            $this->info("–ò–º—è: " . ($config['name'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω'));

            try {
                $response = Http::get("https://api.telegram.org/bot{$config['token']}/getWebhookInfo");
                $result = $response->json();

                if ($response->successful() && ($result['ok'] ?? false)) {
                    $info = $result['result'] ?? [];
                    
                    if (!empty($info['url'])) {
                        $hasWebhooks = true;
                        $this->info("‚úÖ –í–µ–±—Ö—É–∫ –∞–∫—Ç–∏–≤–µ–Ω:");
                        $this->table(
                            ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                            [
                                ['URL', $info['url']],
                                ['–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞', $info['last_error_message'] ?? '–ù–µ—Ç'],
                                ['–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', $info['last_synchronization_error_date'] ?? '–ù–µ—Ç'],
                                ['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', $info['max_connections'] ?? '40'],
                                ['–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', json_encode($info['allowed_updates'] ?? [])],
                            ]
                        );
                    } else {
                        $this->info("‚ùå –í–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }
                } else {
                    $this->error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ");
                    $this->error("–û—Ç–≤–µ—Ç API: " . json_encode($result, JSON_UNESCAPED_UNICODE));
                }
            } catch (\Exception $e) {
                $this->error("‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage());
            }
        }

        if (!$hasWebhooks) {
            $this->warn("\n‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            $this->info("–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: php artisan telegram:setup {$baseUrl}");
        }

        return Command::SUCCESS;
    }
}
