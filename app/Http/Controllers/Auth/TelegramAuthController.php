<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\TelegramAuthRequest;
use App\Models\User;
use App\Services\UserService;
use App\Services\Referral\ReferralService;
use App\Enums\UserRole;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

class TelegramAuthController extends Controller
{
    public function __construct(
        private UserService $userService,
        private ReferralService $referralService
    ) {}

    public function callback(TelegramAuthRequest $request)
    {
        if (!$this->checkTelegramAuthorization($request->validated())) {
            return redirect()->route('login')->with('error', 'Неверная авторизация Telegram');
        }

        $user = User::where('telegram_id', $request->validated('id'))->first();

        if (!$user) {
            // Подготавливаем данные для создания пользователя
            $userData = [
                'telegram_id' => $request->validated('id'),
                'telegram_username' => $request->validated('username'),
            ];

            // Добавляем имя если есть
            if (!empty($request->validated('first_name'))) {
                $userData['name'] = $request->validated('first_name');
            }

            // Добавляем email если есть
            if (!empty($request->validated('email'))) {
                $userData['email'] = $request->validated('email');
            }

            // Создаем пользователя с автогенерацией недостающих данных
            $user = $this->userService->createUserWithAutoGeneratedData($userData);
            
            // Обработка реферальной регистрации
            $referralProcessed = $this->referralService->processReferralRegistration($user);
            
            if ($referralProcessed) {
                Log::info('Пользователь зарегистрирован через Telegram по реферальной ссылке', [
                    'user_id' => $user->id,
                    'telegram_id' => $user->telegram_id,
                ]);
            }
        } else {
            $user->update([
                'telegram_username' => $request->validated('username'),
            ]);
        }

        Auth::login($user);

        return redirect()->intended(route('profile'));
    }

    private function checkTelegramAuthorization(array $auth_data): bool
    {
        $check_hash = $auth_data['hash'];
        unset($auth_data['hash']);
        
        $data_check_arr = [];
        foreach ($auth_data as $key => $value) {
            $data_check_arr[] = $key . '=' . $value;
        }
        sort($data_check_arr);
        
        $data_check_string = implode("\n", $data_check_arr);
        $secret_key = hash('sha256', config('telegram.bot.token'), true);
        $hash = hash_hmac('sha256', $data_check_string, $secret_key);
        
        return $hash === $check_hash;
    }
}
