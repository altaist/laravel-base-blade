<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }

    /**
     * Создать пользователя с автогенерированными данными для авторегистрации
     */
    public function autoGenerated(array $attributes = []): static
    {
        return $this->state([
            'name' => 'Пользователь',
            'email' => $this->generateUniqueEmail(),
            'role' => 'user',
            'password' => Hash::make(Str::random(16)),
        ]);
    }

    /**
     * Создать пользователя только с Telegram данными
     */
    public function telegramOnly(array $attributes = []): static
    {
        return $this->autoGenerated(array_merge([
            'telegram_id' => $attributes['telegram_id'] ?? fake()->unique()->numerify('##########'),
            'telegram_username' => $attributes['telegram_username'] ?? fake()->unique()->userName(),
        ], $attributes));
    }

    /**
     * Создать пользователя с случайным паролем (для авторегистрации)
     */
    public function withoutPassword(array $attributes = []): static
    {
        return $this->state(fn (array $attributes) => [
            'password' => Hash::make(Str::random(16)),
        ]);
    }



    /**
     * Генерировать уникальный email
     */
    private function generateUniqueEmail(): string
    {
        $baseEmail = Str::random(8) . '@user.generated';
        $counter = 1;
        $email = $baseEmail;

        // Проверяем уникальность email
        while (\App\Models\User::where('email', $email)->exists()) {
            $email = Str::random(8) . '_' . $counter . '@user.generated';
            $counter++;
        }

        return $email;
    }
}
